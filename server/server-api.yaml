openapi: 3.1.0
info:
  title: Chari ERP server API
  description: General API of the back-end part of the project
  version: 1.0.0
servers:
  - url: 'https://chari-erp-dev-5jqgv.ondigitalocean.app'
    description: Production server API
  - url: 'https://localhost:8080'
    description: localhost
security:
  - Authorization: [ ]
tags:
  - name: Authorization API
  - name: Organizations API
    description: Operations with organizations' related data
  - name: Image API
paths:
  /api/v1/auth/login:
    description: The main sign in entrance point
    post:
      tags:
        - Authorization API
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      responses:
        200:
          description: 'User is successfully signed in the system'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
        400:
          description: 'Invalid received data'

  /api/v1/org/register:
    post:
      tags:
        - Organizations API
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationRegistrationRequest'
      responses:
        200:
          description: 'Request was successfully sent'
        400:
          description: 'Invalid incoming data'
        409:
          description: 'Conflict with an existing organization'

  /api/v1/org/{organizationId}:
    put:
      description: Update organization by ID
      tags:
        - Organizations API
      parameters:
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Organization name
                  example: "Tech Solutions Ltd"
                address:
                  type: string
                  description: Organization physical address
                  example: "25 Innovation Street, Kyiv, 01033"
                phone:
                  type: string
                  description: Contact phone number
                  example: "+380442345678"
                email:
                  type: string
                  format: email
                  description: Organization email address
                  example: "contact@techsolutions.com"
                website:
                  type: string
                  format: uri
                  description: Organization website URL
                  example: "https://techsolutions.com"
              required:
                - name
      responses:
        200:
          description: 'Organization was successfully updated'
        400:
          description: 'Invalid incoming data'
        404:
          description: 'Organization not found'

  /api/v1/org/{organizationId}/users:
    description: Get paged users from an organization by its ID
    get:
      tags:
        - Organizations API
      parameters:
        - $ref: '#/components/parameters/organizationId'
      responses:
        200:
          description: 'Existed user was found and returned back'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageUsersResponse'
        404:
          description: 'Organization ID not found'

  /api/v1/org/{organizationId}/user/{userId}:
    description: Get an organization user by ID
    get:
      tags:
        - Organizations API
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          description: 'Get detailed user info'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskResponse"

    put:
      description: Update existing user inside an organization
      tags:
        - Organizations API
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/userId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'

  /api/v1/org/{organizationId}/user:
    post:
      description: Create new user inside an organization
      tags:
        - Organizations API
      parameters:
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        201:
          description: 'User was successfully created'
        400:
          description: 'Invalid incoming data'
        403:
          description: 'Forbidden'
        404:
          description: 'Organization ID was not found'

  /api/v1/avatar/{userId}:
    post:
      tags:
        - Image API
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        content:
          application/octet-stream:
            schema:
              properties:
                avatarImage:
                  type: string
                  format: binary
                  description: User avatar image file
      responses:
        200:
          description: 'Avatar was successfully uploaded'
        400:
          description: 'Invalid file format or size'
        404:
          description: 'User not found'

  /api/v1/task/{taskId}/user/{userId}:
    get:
      tags:
        - Task API
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/taskId'
      responses:
        200:
          description: Task was successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        400:
          description: Bad incoming ID values
        401:
          description: User is non-authorized
        403:
          description: User is not allowed to fetch the task
        404:
          description: Task is not found
  
  /api/v1/board:
    post:
      tags:
        - Board API
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  format: uuid
                  description: User Identifier
                  example: "7a1b3c9d-4e5f-6g7h-8i9j-0k1l2m3n4o5p"
                title:
                  type: string
                  example: "Project Board"
      responses:
        200:
          description: Board was successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardSchema'
        401:
          description: User is non-authorized
        403:
          description: User is not allowed to create board

components:
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    organizationId:
      in: path
      name: organizationId
      required: true
      schema:
        type: string
        format: uuid
        example: "550e8400-e29b-41d4-a716-446655440000"
      description: Organization Identifier
    userId:
      in: path
      name: userId
      required: true
      schema:
        type: string
        format: uuid
        example: "7a1b3c9d-4e5f-6g7h-8i9j-0k1l2m3n4o5p"
      description: User Identifier
    boardId:
      in: path
      name: boardId
      required: true
      schema:
        type: string
        format: uuid
        example: "212afe83-8b2c-4e6b-a1f7-c9a2ceac8a01"
      description: Board Identifier
    taskId:
      in: path
      name: taskId
      required: true
      schema:
        type: string
        format: uuid
        example: "b3118c3f-b41c-4968-8e78-63edbf630fef"
      description: Task Identifier
    columnId:
      in: path
      name: columnId
      required: true
      schema:
        type: string
        format: uuid
        example: "05621cb5-283a-4595-98d3-d46541105ada"
      description: Column Identifier

  schemas:
    Status:
      type: object
      properties:
        title:
          type: string
          example: "In Progress"
        id:
          type: string
          format: objectid
          example: "65f1c7a4e52891827ad41234"

    UserLoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: 'john.doe@company.com'
        password:
          type: string
          format: password
          example: 'SecurePass123!'

    UserLoginResponse:
      type: object
      properties:
        avatarUrl:
          type: string
          example: 'https://storage.example.com/avatars/user123.jpg'
        lastName:
          type: string
          example: 'Doe'
        firstName:
          type: string
          example: 'John'
        middleName:
          type: string
          example: 'Robert'
        phone:
          type: string
          example: '+380501234567'
        position:
          type: string
          example: 'Senior Manager'
        email:
          type: string
          format: email
          example: 'john.doe@company.com'
        status:
          type: string
          enum: ['ACTIVE', 'INACTIVE', 'PENDING']
          example: 'ACTIVE'
        role:
          type: string
          enum: ['ADMIN', 'MANAGER', 'EMPLOYEE']
          example: 'MANAGER'
        dateOfBirth:
          type: string
          format: date
          example: '1985-03-15'
        dateOfEntry:
          type: string
          format: date
          example: '2023-01-10'
        address:
          type: string
          example: '123 Business Ave, Kyiv, 01001'
        notes:
          type: string
          example: 'Team lead for the Eastern region'
        lastLogin:
          type: string
          format: date-time
          example: '2024-03-21T14:30:00Z'
        organizationId:
          type: string
          format: uuid
          example: '550e8400-e29b-41d4-a716-446655440000'

    OrganizationRegistrationRequest:
      type: object
      required:
        - name
        - email
        - adminUser
      properties:
        name:
          type: string
          example: 'Tech Solutions Ltd'
        address:
          type: string
          example: '25 Innovation Street, Kyiv, 01033'
        phone:
          type: string
          example: '+380442345678'
        email:
          type: string
          format: email
          example: 'contact@techsolutions.com'
        website:
          type: string
          format: uri
          example: 'https://techsolutions.com'
        edrpou:
          type: string
          example: '12345678'
        adminUser:
          type: object
          required:
            - email
            - password
            - firstName
            - lastName
          properties:
            email:
              type: string
              format: email
              example: 'admin@techsolutions.com'
            password:
              type: string
              format: password
              example: 'AdminPass123!'
            firstName:
              type: string
              example: 'Alex'
            lastName:
              type: string
              example: 'Smith'
            phone:
              type: string
              example: '+380501234567'

    UserCreateRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          example: 'new.user@company.com'
        password:
          type: string
          format: password
          example: 'NewUser2024!'
        firstName:
          type: string
          example: 'Jane'
        lastName:
          type: string
          example: 'Wilson'
        middleName:
          type: string
          example: 'Marie'
        phone:
          type: string
          example: '+380507654321'
        position:
          type: string
          example: 'Product Manager'
        role:
          type: string
          enum: ['ADMIN', 'MANAGER', 'EMPLOYEE']
          example: 'EMPLOYEE'
        dateOfBirth:
          type: string
          format: date
          example: '1990-06-25'
        address:
          type: string
          example: '45 Corporate Drive, Kyiv, 01021'
        notes:
          type: string
          example: 'Experienced in Agile methodologies'

    TaskAttachment:
      type: object
      required:
        - name
        - type
        - keyFromBucket
      properties:
        name:
          type: string
          example: "document.pdf"
        type:
          type: string
          example: "application/pdf"
        keyFromBucket:
          type: string
          example: "tasks/attachments/document-123.pdf"

    TaskComment:
      type: object
      required:
        - text
        - author
      properties:
        text:
          type: string
          example: "This needs to be reviewed by Friday"
        author:
          type: object
          properties:
            id:
              type: string
              format: uuid
              example: "7a1b3c9d-4e5f-6g7h-8i9j-0k1l2m3n4o5p"
            firstName:
              type: string
              example: "John"
            lastName:
              type: string
              example: "Doe"
            avatarUrl:
              type: string
              example: "https://storage.example.com/avatars/user123.jpg"
        created_at:
          type: string
          format: date-time
          example: "2024-03-21T14:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-03-21T14:30:00Z"

    TaskResponse:
      type: object
      properties:
        title:
          type: string
          example: "Implement new feature"
        date_end:
          type: string
          format: date-time
          example: "2024-04-01T23:59:59Z"
        priority:
          type: string
          example: "HIGH"
        date_start:
          type: string
          format: date-time
          example: "2024-03-21T00:00:00Z"
        attachment:
          type: array
          items:
            $ref: "#/components/schemas/TaskAttachment"
        comments:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/TaskComment"
              - type: object
                properties:
                  created_at:
                    type: string
                    format: date-time
                  updated_at:
                    type: string
                    format: date-time
        description:
          type: string
          example: "Detailed description of the task requirements"
        column:
          type: object
          properties:
            id:
              type: string
              format: objectid
              example: "65f1c7a4e52891827ad41234"
            title:
              type: string
              example: "In Progress"
        board_title:
          type: string
          example: 'Board'
        statuses:
          type: array
          items:
            $ref: "#/components/schemas/Status"
        created_at:
          type: string
          format: date-time
          example: "2024-03-21T14:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-03-21T14:30:00Z"

    BoardSchema:
      type: object
      required:
        - title
        - order
      properties:
        title:
          type: string
          example: "Project Alpha Board"
        order:
          type: integer
          example: 1
        _id:
          type: string
          format: objectid
          example: "65f1c7a4e52891827ad41234"
        created_at:
          type: string
          format: date-time
          example: "2024-03-21T14:30:00Z"
        columns:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                format: objectid
                example: "65f1c7a4e52891827ad41234"
              title:
                type: string
                example: "To Do"
    
    PageUsersResponse:
      type: object
      properties:
        totalPages:
          type: number
          example: 5
        totalItems:
          type: number
          example: 48
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserLoginResponse'
          example:
            - firstName: 'John'
              lastName: 'Doe'
              email: 'john.doe@company.com'
              position: 'Senior Manager'
              role: 'MANAGER'
            - firstName: 'Jane'
              lastName: 'Wilson'
              email: 'jane.wilson@company.com'
              position: 'Product Manager'
              role: 'EMPLOYEE'